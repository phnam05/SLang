# Generated from SLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,280,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,1,1,1,1,2,4,2,99,8,2,11,2,12,2,100,1,2,1,2,1,3,1,3,
        1,3,1,3,5,3,109,8,3,10,3,12,3,112,9,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,4,19,198,8,19,11,19,12,19,
        199,1,20,4,20,203,8,20,11,20,12,20,204,1,20,1,20,4,20,209,8,20,11,
        20,12,20,210,1,21,1,21,5,21,215,8,21,10,21,12,21,218,9,21,1,21,1,
        21,1,22,1,22,5,22,224,8,22,10,22,12,22,227,9,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,
        30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,
        35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,
        41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,2,110,216,0,46,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,1,
        0,4,3,0,9,10,13,13,32,32,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,286,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,95,1,0,0,0,5,98,
        1,0,0,0,7,104,1,0,0,0,9,117,1,0,0,0,11,121,1,0,0,0,13,127,1,0,0,
        0,15,130,1,0,0,0,17,135,1,0,0,0,19,141,1,0,0,0,21,145,1,0,0,0,23,
        148,1,0,0,0,25,153,1,0,0,0,27,159,1,0,0,0,29,165,1,0,0,0,31,169,
        1,0,0,0,33,175,1,0,0,0,35,183,1,0,0,0,37,190,1,0,0,0,39,197,1,0,
        0,0,41,202,1,0,0,0,43,212,1,0,0,0,45,221,1,0,0,0,47,228,1,0,0,0,
        49,230,1,0,0,0,51,232,1,0,0,0,53,234,1,0,0,0,55,236,1,0,0,0,57,238,
        1,0,0,0,59,240,1,0,0,0,61,243,1,0,0,0,63,246,1,0,0,0,65,248,1,0,
        0,0,67,251,1,0,0,0,69,253,1,0,0,0,71,256,1,0,0,0,73,259,1,0,0,0,
        75,262,1,0,0,0,77,264,1,0,0,0,79,266,1,0,0,0,81,268,1,0,0,0,83,270,
        1,0,0,0,85,272,1,0,0,0,87,274,1,0,0,0,89,276,1,0,0,0,91,278,1,0,
        0,0,93,94,5,63,0,0,94,2,1,0,0,0,95,96,5,58,0,0,96,4,1,0,0,0,97,99,
        7,0,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,
        0,0,101,102,1,0,0,0,102,103,6,2,0,0,103,6,1,0,0,0,104,105,5,47,0,
        0,105,106,5,47,0,0,106,110,1,0,0,0,107,109,9,0,0,0,108,107,1,0,0,
        0,109,112,1,0,0,0,110,111,1,0,0,0,110,108,1,0,0,0,111,113,1,0,0,
        0,112,110,1,0,0,0,113,114,5,10,0,0,114,115,1,0,0,0,115,116,6,3,0,
        0,116,8,1,0,0,0,117,118,5,118,0,0,118,119,5,97,0,0,119,120,5,114,
        0,0,120,10,1,0,0,0,121,122,5,112,0,0,122,123,5,114,0,0,123,124,5,
        105,0,0,124,125,5,110,0,0,125,126,5,116,0,0,126,12,1,0,0,0,127,128,
        5,105,0,0,128,129,5,102,0,0,129,14,1,0,0,0,130,131,5,101,0,0,131,
        132,5,108,0,0,132,133,5,115,0,0,133,134,5,101,0,0,134,16,1,0,0,0,
        135,136,5,119,0,0,136,137,5,104,0,0,137,138,5,105,0,0,138,139,5,
        108,0,0,139,140,5,101,0,0,140,18,1,0,0,0,141,142,5,102,0,0,142,143,
        5,111,0,0,143,144,5,114,0,0,144,20,1,0,0,0,145,146,5,105,0,0,146,
        147,5,110,0,0,147,22,1,0,0,0,148,149,5,116,0,0,149,150,5,114,0,0,
        150,151,5,117,0,0,151,152,5,101,0,0,152,24,1,0,0,0,153,154,5,102,
        0,0,154,155,5,97,0,0,155,156,5,108,0,0,156,157,5,115,0,0,157,158,
        5,101,0,0,158,26,1,0,0,0,159,160,5,98,0,0,160,161,5,114,0,0,161,
        162,5,101,0,0,162,163,5,97,0,0,163,164,5,107,0,0,164,28,1,0,0,0,
        165,166,5,105,0,0,166,167,5,110,0,0,167,168,5,116,0,0,168,30,1,0,
        0,0,169,170,5,102,0,0,170,171,5,108,0,0,171,172,5,111,0,0,172,173,
        5,97,0,0,173,174,5,116,0,0,174,32,1,0,0,0,175,176,5,98,0,0,176,177,
        5,111,0,0,177,178,5,111,0,0,178,179,5,108,0,0,179,180,5,101,0,0,
        180,181,5,97,0,0,181,182,5,110,0,0,182,34,1,0,0,0,183,184,5,115,
        0,0,184,185,5,116,0,0,185,186,5,114,0,0,186,187,5,105,0,0,187,188,
        5,110,0,0,188,189,5,103,0,0,189,36,1,0,0,0,190,191,5,97,0,0,191,
        192,5,114,0,0,192,193,5,114,0,0,193,194,5,97,0,0,194,195,5,121,0,
        0,195,38,1,0,0,0,196,198,7,1,0,0,197,196,1,0,0,0,198,199,1,0,0,0,
        199,197,1,0,0,0,199,200,1,0,0,0,200,40,1,0,0,0,201,203,7,1,0,0,202,
        201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,
        206,1,0,0,0,206,208,5,46,0,0,207,209,7,1,0,0,208,207,1,0,0,0,209,
        210,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,42,1,0,0,0,212,216,
        5,34,0,0,213,215,9,0,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,217,
        1,0,0,0,216,214,1,0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,220,
        5,34,0,0,220,44,1,0,0,0,221,225,7,2,0,0,222,224,7,3,0,0,223,222,
        1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,46,1,
        0,0,0,227,225,1,0,0,0,228,229,5,61,0,0,229,48,1,0,0,0,230,231,5,
        43,0,0,231,50,1,0,0,0,232,233,5,45,0,0,233,52,1,0,0,0,234,235,5,
        42,0,0,235,54,1,0,0,0,236,237,5,47,0,0,237,56,1,0,0,0,238,239,5,
        37,0,0,239,58,1,0,0,0,240,241,5,61,0,0,241,242,5,61,0,0,242,60,1,
        0,0,0,243,244,5,33,0,0,244,245,5,61,0,0,245,62,1,0,0,0,246,247,5,
        60,0,0,247,64,1,0,0,0,248,249,5,60,0,0,249,250,5,61,0,0,250,66,1,
        0,0,0,251,252,5,62,0,0,252,68,1,0,0,0,253,254,5,62,0,0,254,255,5,
        61,0,0,255,70,1,0,0,0,256,257,5,38,0,0,257,258,5,38,0,0,258,72,1,
        0,0,0,259,260,5,124,0,0,260,261,5,124,0,0,261,74,1,0,0,0,262,263,
        5,33,0,0,263,76,1,0,0,0,264,265,5,40,0,0,265,78,1,0,0,0,266,267,
        5,41,0,0,267,80,1,0,0,0,268,269,5,91,0,0,269,82,1,0,0,0,270,271,
        5,93,0,0,271,84,1,0,0,0,272,273,5,44,0,0,273,86,1,0,0,0,274,275,
        5,59,0,0,275,88,1,0,0,0,276,277,5,123,0,0,277,90,1,0,0,0,278,279,
        5,125,0,0,279,92,1,0,0,0,8,0,100,110,199,204,210,216,225,1,6,0,0
    ]

class SLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    WS = 3
    COMMENT = 4
    VAR = 5
    PRINT = 6
    IF = 7
    ELSE = 8
    WHILE = 9
    FOR = 10
    IN = 11
    TRUE = 12
    FALSE = 13
    BREAK = 14
    INT = 15
    FLOAT = 16
    BOOLEAN = 17
    STRING = 18
    ARRAY = 19
    INTEGER = 20
    FLOATING_POINT = 21
    STRING_LITERAL = 22
    IDENTIFIER = 23
    ASSIGN = 24
    PLUS = 25
    MINUS = 26
    MULT = 27
    DIV = 28
    MOD = 29
    EQUAL = 30
    NOT_EQUAL = 31
    LESS_THAN = 32
    LESS_THAN_OR_EQUAL = 33
    GREATER_THAN = 34
    GREATER_THAN_OR_EQUAL = 35
    AND = 36
    OR = 37
    NOT = 38
    LPAREN = 39
    RPAREN = 40
    LBRACKET = 41
    RBRACKET = 42
    COMMA = 43
    SEMI = 44
    LBRACE = 45
    RBRACE = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'?'", "':'", "'var'", "'print'", "'if'", "'else'", "'while'", 
            "'for'", "'in'", "'true'", "'false'", "'break'", "'int'", "'float'", 
            "'boolean'", "'string'", "'array'", "'='", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'&&'", "'||'", "'!'", "'('", "')'", "'['", "']'", "','", "';'", 
            "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "COMMENT", "VAR", "PRINT", "IF", "ELSE", "WHILE", "FOR", 
            "IN", "TRUE", "FALSE", "BREAK", "INT", "FLOAT", "BOOLEAN", "STRING", 
            "ARRAY", "INTEGER", "FLOATING_POINT", "STRING_LITERAL", "IDENTIFIER", 
            "ASSIGN", "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
            "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
            "AND", "OR", "NOT", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
            "COMMA", "SEMI", "LBRACE", "RBRACE" ]

    ruleNames = [ "T__0", "T__1", "WS", "COMMENT", "VAR", "PRINT", "IF", 
                  "ELSE", "WHILE", "FOR", "IN", "TRUE", "FALSE", "BREAK", 
                  "INT", "FLOAT", "BOOLEAN", "STRING", "ARRAY", "INTEGER", 
                  "FLOATING_POINT", "STRING_LITERAL", "IDENTIFIER", "ASSIGN", 
                  "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
                  "AND", "OR", "NOT", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
                  "COMMA", "SEMI", "LBRACE", "RBRACE" ]

    grammarFileName = "SLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


